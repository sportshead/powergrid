// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v10

import (
	v1 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
)

// CommandSpecApplyConfiguration represents an declarative configuration of the CommandSpec type for use
// with apply.
type CommandSpecApplyConfiguration struct {
	ShouldSendDeferred *bool    `json:"shouldSendDeferred,omitempty"`
	ServiceName        *string  `json:"serviceName,omitempty"`
	Command            *v1.JSON `json:"command,omitempty"`
}

// CommandSpecApplyConfiguration constructs an declarative configuration of the CommandSpec type for use with
// apply.
func CommandSpec() *CommandSpecApplyConfiguration {
	return &CommandSpecApplyConfiguration{}
}

// WithShouldSendDeferred sets the ShouldSendDeferred field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ShouldSendDeferred field is set to the value of the last call.
func (b *CommandSpecApplyConfiguration) WithShouldSendDeferred(value bool) *CommandSpecApplyConfiguration {
	b.ShouldSendDeferred = &value
	return b
}

// WithServiceName sets the ServiceName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ServiceName field is set to the value of the last call.
func (b *CommandSpecApplyConfiguration) WithServiceName(value string) *CommandSpecApplyConfiguration {
	b.ServiceName = &value
	return b
}

// WithCommand sets the Command field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Command field is set to the value of the last call.
func (b *CommandSpecApplyConfiguration) WithCommand(value v1.JSON) *CommandSpecApplyConfiguration {
	b.Command = &value
	return b
}
