// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"
	json "encoding/json"
	"fmt"

	v10 "github.com/sportshead/powergrid/pkg/apis/powergrid.sportshead.dev/v10"
	powergridsportsheaddevv10 "github.com/sportshead/powergrid/pkg/generated/applyconfiguration/powergrid.sportshead.dev/v10"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeCommands implements CommandInterface
type FakeCommands struct {
	Fake *FakePowergridV10
	ns   string
}

var commandsResource = v10.SchemeGroupVersion.WithResource("commands")

var commandsKind = v10.SchemeGroupVersion.WithKind("Command")

// Get takes name of the command, and returns the corresponding command object, and an error if there is any.
func (c *FakeCommands) Get(ctx context.Context, name string, options v1.GetOptions) (result *v10.Command, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(commandsResource, c.ns, name), &v10.Command{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v10.Command), err
}

// List takes label and field selectors, and returns the list of Commands that match those selectors.
func (c *FakeCommands) List(ctx context.Context, opts v1.ListOptions) (result *v10.CommandList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(commandsResource, commandsKind, c.ns, opts), &v10.CommandList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v10.CommandList{ListMeta: obj.(*v10.CommandList).ListMeta}
	for _, item := range obj.(*v10.CommandList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested commands.
func (c *FakeCommands) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(commandsResource, c.ns, opts))

}

// Create takes the representation of a command and creates it.  Returns the server's representation of the command, and an error, if there is any.
func (c *FakeCommands) Create(ctx context.Context, command *v10.Command, opts v1.CreateOptions) (result *v10.Command, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(commandsResource, c.ns, command), &v10.Command{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v10.Command), err
}

// Update takes the representation of a command and updates it. Returns the server's representation of the command, and an error, if there is any.
func (c *FakeCommands) Update(ctx context.Context, command *v10.Command, opts v1.UpdateOptions) (result *v10.Command, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(commandsResource, c.ns, command), &v10.Command{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v10.Command), err
}

// Delete takes name of the command and deletes it. Returns an error if one occurs.
func (c *FakeCommands) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(commandsResource, c.ns, name, opts), &v10.Command{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeCommands) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(commandsResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v10.CommandList{})
	return err
}

// Patch applies the patch and returns the patched command.
func (c *FakeCommands) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v10.Command, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(commandsResource, c.ns, name, pt, data, subresources...), &v10.Command{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v10.Command), err
}

// Apply takes the given apply declarative configuration, applies it and returns the applied command.
func (c *FakeCommands) Apply(ctx context.Context, command *powergridsportsheaddevv10.CommandApplyConfiguration, opts v1.ApplyOptions) (result *v10.Command, err error) {
	if command == nil {
		return nil, fmt.Errorf("command provided to Apply must not be nil")
	}
	data, err := json.Marshal(command)
	if err != nil {
		return nil, err
	}
	name := command.Name
	if name == nil {
		return nil, fmt.Errorf("command.Name must be provided to Apply")
	}
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(commandsResource, c.ns, *name, types.ApplyPatchType, data), &v10.Command{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v10.Command), err
}
